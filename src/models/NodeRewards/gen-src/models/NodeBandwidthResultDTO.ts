/* tslint:disable */
/* eslint-disable */
/**
 * Symbol Node Rewards API
 * The API is the rest gateway to the symbol rewards controller.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    BandwidthResultDTO,
    BandwidthResultDTOFromJSON,
    BandwidthResultDTOFromJSONTyped,
    BandwidthResultDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface NodeBandwidthResultDTO
 */
export interface NodeBandwidthResultDTO {
    /**
     * ID of the test result
     * @type {string}
     * @memberof NodeBandwidthResultDTO
     */
    id: string;
    /**
     * ID of the tested node
     * @type {string}
     * @memberof NodeBandwidthResultDTO
     */
    nodeId: string;
    /**
     * 
     * @type {string}
     * @memberof NodeBandwidthResultDTO
     */
    entitySeed: string;
    /**
     * 
     * @type {string}
     * @memberof NodeBandwidthResultDTO
     */
    entityHash: string;
    /**
     * 
     * @type {Array<BandwidthResultDTO>}
     * @memberof NodeBandwidthResultDTO
     */
    bandwidthResults?: Array<BandwidthResultDTO>;
    /**
     * 
     * @type {number}
     * @memberof NodeBandwidthResultDTO
     */
    iterations: number;
    /**
     * 
     * @type {boolean}
     * @memberof NodeBandwidthResultDTO
     */
    resultValid: boolean;
    /**
     * 
     * @type {number}
     * @memberof NodeBandwidthResultDTO
     */
    round: number;
    /**
     * 
     * @type {Date}
     * @memberof NodeBandwidthResultDTO
     */
    createdAt: Date;
}

export function NodeBandwidthResultDTOFromJSON(json: any): NodeBandwidthResultDTO {
    return NodeBandwidthResultDTOFromJSONTyped(json, false);
}

export function NodeBandwidthResultDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeBandwidthResultDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'nodeId': json['nodeId'],
        'entitySeed': json['entitySeed'],
        'entityHash': json['entityHash'],
        'bandwidthResults': !exists(json, 'bandwidthResults') ? undefined : ((json['bandwidthResults'] as Array<any>).map(BandwidthResultDTOFromJSON)),
        'iterations': json['iterations'],
        'resultValid': json['resultValid'],
        'round': json['round'],
        'createdAt': (new Date(json['createdAt'])),
    };
}

export function NodeBandwidthResultDTOToJSON(value?: NodeBandwidthResultDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'nodeId': value.nodeId,
        'entitySeed': value.entitySeed,
        'entityHash': value.entityHash,
        'bandwidthResults': value.bandwidthResults === undefined ? undefined : ((value.bandwidthResults as Array<any>).map(BandwidthResultDTOToJSON)),
        'iterations': value.iterations,
        'resultValid': value.resultValid,
        'round': value.round,
        'createdAt': (value.createdAt.toISOString()),
    };
}


