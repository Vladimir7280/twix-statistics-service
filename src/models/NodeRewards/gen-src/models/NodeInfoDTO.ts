/* tslint:disable */
/* eslint-disable */
/**
 * Symbol Node Rewards API
 * The API is the rest gateway to the symbol rewards controller.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    GeoLocationDTO,
    GeoLocationDTOFromJSON,
    GeoLocationDTOFromJSONTyped,
    GeoLocationDTOToJSON,
    NodeStatusDTO,
    NodeStatusDTOFromJSON,
    NodeStatusDTOFromJSONTyped,
    NodeStatusDTOToJSON,
    RewardProgramDTO,
    RewardProgramDTOFromJSON,
    RewardProgramDTOFromJSONTyped,
    RewardProgramDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface NodeInfoDTO
 */
export interface NodeInfoDTO {
    /**
     * ID of the node.
     * @type {string}
     * @memberof NodeInfoDTO
     */
    id: string;
    /**
     * A friendly name of the node.
     * @type {string}
     * @memberof NodeInfoDTO
     */
    name: string;
    /**
     * The host of the server and agent
     * @type {string}
     * @memberof NodeInfoDTO
     */
    host: string;
    /**
     * The server port
     * @type {number}
     * @memberof NodeInfoDTO
     */
    serverPort: number;
    /**
     * The agent port
     * @type {number}
     * @memberof NodeInfoDTO
     */
    agentPort: number;
    /**
     * The symbol rest url
     * @type {string}
     * @memberof NodeInfoDTO
     */
    restGatewayUrl: string;
    /**
     * Public key. A 32 bytes / 64 HEX string.
     * @type {string}
     * @memberof NodeInfoDTO
     */
    nodePublicKey: string;
    /**
     * Public key. A 32 bytes / 64 HEX string.
     * @type {string}
     * @memberof NodeInfoDTO
     */
    mainPublicKey: string;
    /**
     * 
     * @type {NodeStatusDTO}
     * @memberof NodeInfoDTO
     */
    status: NodeStatusDTO;
    /**
     * 
     * @type {RewardProgramDTO}
     * @memberof NodeInfoDTO
     */
    rewardProgram: RewardProgramDTO;
    /**
     * 
     * @type {GeoLocationDTO}
     * @memberof NodeInfoDTO
     */
    geoLocation?: GeoLocationDTO;
}

export function NodeInfoDTOFromJSON(json: any): NodeInfoDTO {
    return NodeInfoDTOFromJSONTyped(json, false);
}

export function NodeInfoDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): NodeInfoDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'name': json['name'],
        'host': json['host'],
        'serverPort': json['serverPort'],
        'agentPort': json['agentPort'],
        'restGatewayUrl': json['restGatewayUrl'],
        'nodePublicKey': json['nodePublicKey'],
        'mainPublicKey': json['mainPublicKey'],
        'status': NodeStatusDTOFromJSON(json['status']),
        'rewardProgram': RewardProgramDTOFromJSON(json['rewardProgram']),
        'geoLocation': !exists(json, 'geoLocation') ? undefined : GeoLocationDTOFromJSON(json['geoLocation']),
    };
}

export function NodeInfoDTOToJSON(value?: NodeInfoDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'host': value.host,
        'serverPort': value.serverPort,
        'agentPort': value.agentPort,
        'restGatewayUrl': value.restGatewayUrl,
        'nodePublicKey': value.nodePublicKey,
        'mainPublicKey': value.mainPublicKey,
        'status': NodeStatusDTOToJSON(value.status),
        'rewardProgram': RewardProgramDTOToJSON(value.rewardProgram),
        'geoLocation': GeoLocationDTOToJSON(value.geoLocation),
    };
}


