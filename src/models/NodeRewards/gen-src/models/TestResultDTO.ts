/* tslint:disable */
/* eslint-disable */
/**
 * Symbol Node Rewards API
 * The API is the rest gateway to the symbol rewards controller.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    TestResultStatusDTO,
    TestResultStatusDTOFromJSON,
    TestResultStatusDTOFromJSONTyped,
    TestResultStatusDTOToJSON,
} from './';

/**
 * 
 * @export
 * @interface TestResultDTO
 */
export interface TestResultDTO {
    /**
     * ID of the test result
     * @type {string}
     * @memberof TestResultDTO
     */
    id: string;
    /**
     * ID of the tested node
     * @type {string}
     * @memberof TestResultDTO
     */
    nodeId: string;
    /**
     * 
     * @type {TestResultStatusDTO}
     * @memberof TestResultDTO
     */
    nodeVersionTestStatus: TestResultStatusDTO;
    /**
     * 
     * @type {TestResultStatusDTO}
     * @memberof TestResultDTO
     */
    chainHeightTestStatus: TestResultStatusDTO;
    /**
     * 
     * @type {TestResultStatusDTO}
     * @memberof TestResultDTO
     */
    chainPartTestStatus: TestResultStatusDTO;
    /**
     * 
     * @type {TestResultStatusDTO}
     * @memberof TestResultDTO
     */
    responsivenessTestStatus: TestResultStatusDTO;
    /**
     * 
     * @type {TestResultStatusDTO}
     * @memberof TestResultDTO
     */
    nodeBandwidthTestStatus: TestResultStatusDTO;
    /**
     * 
     * @type {TestResultStatusDTO}
     * @memberof TestResultDTO
     */
    computingPowerTestStatus: TestResultStatusDTO;
    /**
     * 
     * @type {TestResultStatusDTO}
     * @memberof TestResultDTO
     */
    nodePingTestStatus: TestResultStatusDTO;
    /**
     * 
     * @type {TestResultStatusDTO}
     * @memberof TestResultDTO
     */
    nodeBalanceTestStatus: TestResultStatusDTO;
    /**
     * 
     * @type {boolean}
     * @memberof TestResultDTO
     */
    roundOk?: boolean;
    /**
     * 
     * @type {number}
     * @memberof TestResultDTO
     */
    round: number;
    /**
     * 
     * @type {Date}
     * @memberof TestResultDTO
     */
    createdAt: Date;
    /**
     * 
     * @type {Date}
     * @memberof TestResultDTO
     */
    finishedAt?: Date;
}

export function TestResultDTOFromJSON(json: any): TestResultDTO {
    return TestResultDTOFromJSONTyped(json, false);
}

export function TestResultDTOFromJSONTyped(json: any, ignoreDiscriminator: boolean): TestResultDTO {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': json['id'],
        'nodeId': json['nodeId'],
        'nodeVersionTestStatus': TestResultStatusDTOFromJSON(json['nodeVersionTestStatus']),
        'chainHeightTestStatus': TestResultStatusDTOFromJSON(json['chainHeightTestStatus']),
        'chainPartTestStatus': TestResultStatusDTOFromJSON(json['chainPartTestStatus']),
        'responsivenessTestStatus': TestResultStatusDTOFromJSON(json['responsivenessTestStatus']),
        'nodeBandwidthTestStatus': TestResultStatusDTOFromJSON(json['nodeBandwidthTestStatus']),
        'computingPowerTestStatus': TestResultStatusDTOFromJSON(json['computingPowerTestStatus']),
        'nodePingTestStatus': TestResultStatusDTOFromJSON(json['nodePingTestStatus']),
        'nodeBalanceTestStatus': TestResultStatusDTOFromJSON(json['nodeBalanceTestStatus']),
        'roundOk': !exists(json, 'roundOk') ? undefined : json['roundOk'],
        'round': json['round'],
        'createdAt': (new Date(json['createdAt'])),
        'finishedAt': !exists(json, 'finishedAt') ? undefined : (new Date(json['finishedAt'])),
    };
}

export function TestResultDTOToJSON(value?: TestResultDTO | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'nodeId': value.nodeId,
        'nodeVersionTestStatus': TestResultStatusDTOToJSON(value.nodeVersionTestStatus),
        'chainHeightTestStatus': TestResultStatusDTOToJSON(value.chainHeightTestStatus),
        'chainPartTestStatus': TestResultStatusDTOToJSON(value.chainPartTestStatus),
        'responsivenessTestStatus': TestResultStatusDTOToJSON(value.responsivenessTestStatus),
        'nodeBandwidthTestStatus': TestResultStatusDTOToJSON(value.nodeBandwidthTestStatus),
        'computingPowerTestStatus': TestResultStatusDTOToJSON(value.computingPowerTestStatus),
        'nodePingTestStatus': TestResultStatusDTOToJSON(value.nodePingTestStatus),
        'nodeBalanceTestStatus': TestResultStatusDTOToJSON(value.nodeBalanceTestStatus),
        'roundOk': value.roundOk,
        'round': value.round,
        'createdAt': (value.createdAt.toISOString()),
        'finishedAt': value.finishedAt === undefined ? undefined : (value.finishedAt.toISOString()),
    };
}


